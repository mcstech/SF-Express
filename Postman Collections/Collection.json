{
  "info": {
    "_postman_id": "927448a2-2569-486b-a210-522496312f18",
    "name": "Staging",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Order",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "102409cd-f4bc-4cc3-9cde-ab3d14dc5779",
            "exec": [
              "var aesKey = pm.collectionVariables.get(\"aesKey\");",
              "var token = pm.collectionVariables.get(\"token\");",
              "var time = (new Date()).getTime();",
              "var nonce = pm.collectionVariables.get(\"nonce\");",
              "var appKey = pm.collectionVariables.get(\"appKey\");å",
              "var customerCode = pm.collectionVariables.get(\"customerCode\");",
              "",
              "pm.collectionVariables.set(\"timestamp\", time);",
              "",
              "var data = {",
              "    customerCode: 'ICRMXXXXXXX',",
              "    sfWaybillNo: 'SF1324481972744',",
              "    // customerOrderNo: 'kts_api20210701840182504',",
              "    // interProductCode: 'INT0007',",
              "    // parcelQuantity: 1,",
              "    // paymentInfo: {",
              "    //     payMethod: 1,",
              "    //     payMonthCard: '',",
              "    //     taxPayMethod: '2',",
              "    //     taxPayMonthCard: ''",
              "    // },",
              "    // senderInfo: {",
              "    //     address: '306 S BRYN MAWR AVE',",
              "    //     cargoType: 1,",
              "    //     certCardNo: '',",
              "    //     certType: '',",
              "    //     regionSecond: '11A',",
              "    //     company: '',",
              "    //     contact: '姓名测试',",
              "    //     country: 'SG',",
              "    //     regionThird: '',",
              "    //     email: 'iuop@test.com',",
              "    //     eori: '',",
              "    //     phoneAreaCode: '65',",
              "    //     phoneNo: '54875485',",
              "    //     postCode: '759973',",
              "    //     regionFirst: 'Admiralty Road East',",
              "    //     telAreaCode: '86',",
              "    //     telNo: '9516168888',",
              "    //     vat: ''",
              "    // },",
              "    // receiverInfo: {",
              "    //     address: '新加坡 详细地址',",
              "    //     cargoType: 1,",
              "    //     certCardNo: '',",
              "    //     certType: '',",
              "    //     regionSecond: '106A',",
              "    //     company: '顺丰速运',",
              "    //     contact: '李想',",
              "    //     country: 'SG',",
              "    //     regionThird: '',",
              "    //     email: 'iuop@test.com',",
              "    //     eori: '',",
              "    //     phoneAreaCode: '65',",
              "    //     phoneNo: '54875485',",
              "    //     postCode: '536727',",
              "    //     regionFirst: 'Ah Soo Walk',",
              "    //     telAreaCode: '86',",
              "    //     telNo: '9516168888',",
              "    //     vat: ''",
              "    // },",
              "    // customsInfo: {",
              "    //     aesNo: '',",
              "    //     businessRemark: '',",
              "    //     customsBatch: '',",
              "    //     harmonizedCode: '',",
              "    //     senderReasonContent: '',",
              "    //     tradeCondition: ''",
              "    // },",
              "    // parcelInfoList: [",
              "    //     {",
              "    //         amount: 0.1,",
              "    //         brand: '',",
              "    //         currency: '',",
              "    //         goodsCode: '',",
              "    //         goodsDesc: '',",
              "    //         goodsUrl: '',",
              "    //         hsCode: '',",
              "    //         name: 'iPhone',",
              "    //         originCountry: 'SG',",
              "    //         productCustomsNo: '',",
              "    //         productRecordNo: '',",
              "    //         quantity: 1,",
              "    //         stateBarCode: '',",
              "    //         unit: '个'",
              "    //     }",
              "    // ],",
              "};",
              "",
              "",
              "var strData = JSON.stringify(data);",
              "",
              "var cipherData = new BizMsgCrypt(token, aesKey, appKey);",
              "",
              "// console.log('encryptedData:', cipherData);",
              "",
              "pm.collectionVariables.set('request_body', cipherData);",
              "",
              "var toBeEncrypt = token + time + nonce + cipherData;",
              "var signature = CryptoJS.SHA256(toBeEncrypt).toString();",
              "",
              "pm.collectionVariables.set(\"signature\", signature);",
              "",
              "class BizMsgCrypt {",
              "    constructor(token, encodingAesKey, appId) {",
              "        this.order = order;",
              "        this.config = config;",
              "        this.token = token;",
              "        if (strlen(encodingAesKey) != 43) {",
              "            throw new Error('invalid aes key');",
              "        }",
              "        this.encodingAesKey = encodingAesKey;",
              "\t\tthis.appId = appId;",
              "    }",
              "    encryptMsg(replyMsg, timeStamp, nonce) {",
              "        const pc = new PrpCrypt(this.encodingAesKey);",
              "        const $array = pc.encrypt(replyMsg, this.appId);",
              "        const ret = $array[0];",
              "\t\tif (ret != 0) {",
              "\t\t\treturn ret;",
              "\t\t}",
              "        const encrypt = $array[1];",
              "    }",
              "}",
              "",
              "class PrpCrypt {",
              "    key;",
              "    constructor(k) {",
              "        this.key = `${k}=`.replace(/\\s/g, '+')",
              "    }",
              "    encrypt(text, appid) {",
              "        try {",
              "            const random = this.getRandomStr();",
              "            const packedText = pack('N', text.length);",
              "            const txt = `${random}${packedText}${text}${appid}`;",
              "            const iv = this.key.substr(0, 16);",
              "            // const iv = CryptoJS.lib.WordArray.random(16);",
              "            const dataWA = CryptoJS.enc.Utf8.parse(txt);",
              "            const keyWA = CryptoJS.enc.Base64.parse(this.key);",
              "            const ciphertext = CryptoJS",
              "                .AES",
              "                .encrypt(dataWA, keyWA, {iv: iv})",
              "                .ciphertext;",
              "            const ivCiphertext = iv.clone().concat(ciphertext);",
              "            const ivCiphertextB64 = ivCiphertext.toString(CryptoJS.enc.Base64);",
              "            return ivCiphertextB64;",
              "        } catch (err) {",
              "            console.log('prpCrpty err', err.message);",
              "        }",
              "    }",
              "    getRandomStr() {",
              "        str = '';",
              "        str_pol = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';",
              "        max = str_pol.length - 1;",
              "        for (i = 0; i < 16; i++) {",
              "            str.concat(str_pol[this.mtRand(0, max)]);",
              "        }",
              "        return str;",
              "    }",
              "    mtRand (min, max) {",
              "        const argc = arguments.length;",
              "        if (argc === 0) {",
              "            min = 0;",
              "            max = 2147483647;",
              "        } else if (argc === 1) {",
              "            throw new Error('Warning: mt_rand() expects exactly 2 parameters, 1 given');",
              "        } else {",
              "            min = parseInt(min, 10);",
              "            max = parseInt(max, 10);",
              "        }",
              "        return Math.floor(Math.random() * (max - min + 1)) + min;",
              "    }",
              "}",
              "",
              "console.log('toBeEncrypt:', toBeEncrypt);",
              "console.log('timestamp:', time);",
              "// console.log('nonce', nonce);",
              "// console.log('customerCode:', customerCode);",
              "console.log('signature:', signature);",
              "",
              "function pack(format) {",
              "  //  discuss at: https://locutus.io/php/pack/",
              "  // original by: Tim de Koning (https://www.kingsquare.nl)",
              "  //    parts by: Jonas Raoni Soares Silva (https://www.jsfromhell.com)",
              "  // bugfixed by: Tim de Koning (https://www.kingsquare.nl)",
              "  //      note 1: Float encoding by: Jonas Raoni Soares Silva",
              "  //      note 1: Home: https://www.kingsquare.nl/blog/12-12-2009/13507444",
              "  //      note 1: Feedback: phpjs-pack@kingsquare.nl",
              "  //      note 1: \"machine dependent byte order and size\" aren't",
              "  //      note 1: applicable for JavaScript; pack works as on a 32bit,",
              "  //      note 1: little endian machine.",
              "  //   example 1: pack('nvc*', 0x1234, 0x5678, 65, 66)",
              "  //   returns 1: '\\u00124xVAB'",
              "  //   example 2: pack('H4', '2345')",
              "  //   returns 2: '#E'",
              "  //   example 3: pack('H*', 'D5')",
              "  //   returns 3: 'Õ'",
              "  //   example 4: pack('d', -100.876)",
              "  //   returns 4: \"\\u0000\\u0000\\u0000\\u0000\\u00008YÀ\"",
              "  //        test: skip-1",
              "  let formatPointer = 0",
              "  let argumentPointer = 1",
              "  let result = ''",
              "  let argument = ''",
              "  let i = 0",
              "  let r = []",
              "  let instruction, quantifier, word, precisionBits, exponentBits, extraNullCount",
              "  // vars used by float encoding",
              "  let bias",
              "  let minExp",
              "  let maxExp",
              "  let minUnnormExp",
              "  let status",
              "  let exp",
              "  let len",
              "  let bin",
              "  let signal",
              "  let n",
              "  let intPart",
              "  let floatPart",
              "  let lastBit",
              "  let rounded",
              "  let j",
              "  let k",
              "  let tmpResult",
              "  while (formatPointer < format.length) {",
              "    instruction = format.charAt(formatPointer)",
              "    quantifier = ''",
              "    formatPointer++",
              "    while ((formatPointer < format.length) && (format.charAt(formatPointer)",
              "      .match(/[\\d*]/) !== null)) {",
              "      quantifier += format.charAt(formatPointer)",
              "      formatPointer++",
              "    }",
              "    if (quantifier === '') {",
              "      quantifier = '1'",
              "    }",
              "    // Now pack variables: 'quantifier' times 'instruction'",
              "    switch (instruction) {",
              "      case 'a':",
              "      case 'A':",
              "        // NUL-padded string",
              "        // SPACE-padded string",
              "        if (typeof arguments[argumentPointer] === 'undefined') {",
              "          throw new Error('Warning:  pack() Type ' + instruction + ': not enough arguments')",
              "        } else {",
              "          argument = String(arguments[argumentPointer])",
              "        }",
              "        if (quantifier === '*') {",
              "          quantifier = argument.length",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          if (typeof argument[i] === 'undefined') {",
              "            if (instruction === 'a') {",
              "              result += String.fromCharCode(0)",
              "            } else {",
              "              result += ' '",
              "            }",
              "          } else {",
              "            result += argument[i]",
              "          }",
              "        }",
              "        argumentPointer++",
              "        break",
              "      case 'h':",
              "      case 'H':",
              "        // Hex string, low nibble first",
              "        // Hex string, high nibble first",
              "        if (typeof arguments[argumentPointer] === 'undefined') {",
              "          throw new Error('Warning: pack() Type ' + instruction + ': not enough arguments')",
              "        } else {",
              "          argument = arguments[argumentPointer]",
              "        }",
              "        if (quantifier === '*') {",
              "          quantifier = argument.length",
              "        }",
              "        if (quantifier > argument.length) {",
              "          const msg = 'Warning: pack() Type ' + instruction + ': not enough characters in string'",
              "          throw new Error(msg)",
              "        }",
              "        for (i = 0; i < quantifier; i += 2) {",
              "          // Always get per 2 bytes...",
              "          word = argument[i]",
              "          if (((i + 1) >= quantifier) || typeof argument[i + 1] === 'undefined') {",
              "            word += '0'",
              "          } else {",
              "            word += argument[i + 1]",
              "          }",
              "          // The fastest way to reverse?",
              "          if (instruction === 'h') {",
              "            word = word[1] + word[0]",
              "          }",
              "          result += String.fromCharCode(parseInt(word, 16))",
              "        }",
              "        argumentPointer++",
              "        break",
              "      case 'c':",
              "      case 'C':",
              "        // signed char",
              "        // unsigned char",
              "        // c and C is the same in pack",
              "        if (quantifier === '*') {",
              "          quantifier = arguments.length - argumentPointer",
              "        }",
              "        if (quantifier > (arguments.length - argumentPointer)) {",
              "          throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          result += String.fromCharCode(arguments[argumentPointer])",
              "          argumentPointer++",
              "        }",
              "        break",
              "      case 's':",
              "      case 'S':",
              "      case 'v':",
              "        // signed short (always 16 bit, machine byte order)",
              "        // unsigned short (always 16 bit, machine byte order)",
              "        // s and S is the same in pack",
              "        if (quantifier === '*') {",
              "          quantifier = arguments.length - argumentPointer",
              "        }",
              "        if (quantifier > (arguments.length - argumentPointer)) {",
              "          throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          result += String.fromCharCode(arguments[argumentPointer] & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)",
              "          argumentPointer++",
              "        }",
              "        break",
              "      case 'n':",
              "        // unsigned short (always 16 bit, big endian byte order)",
              "        if (quantifier === '*') {",
              "          quantifier = arguments.length - argumentPointer",
              "        }",
              "        if (quantifier > (arguments.length - argumentPointer)) {",
              "          throw new Error('Warning: pack() Type ' + instruction + ': too few arguments')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] & 0xFF)",
              "          argumentPointer++",
              "        }",
              "        break",
              "      case 'i':",
              "      case 'I':",
              "      case 'l':",
              "      case 'L':",
              "      case 'V':",
              "        // signed integer (machine dependent size and byte order)",
              "        // unsigned integer (machine dependent size and byte order)",
              "        // signed long (always 32 bit, machine byte order)",
              "        // unsigned long (always 32 bit, machine byte order)",
              "        // unsigned long (always 32 bit, little endian byte order)",
              "        if (quantifier === '*') {",
              "          quantifier = arguments.length - argumentPointer",
              "        }",
              "        if (quantifier > (arguments.length - argumentPointer)) {",
              "          throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          result += String.fromCharCode(arguments[argumentPointer] & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 16 & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 24 & 0xFF)",
              "          argumentPointer++",
              "        }",
              "        break",
              "      case 'N':",
              "        // unsigned long (always 32 bit, big endian byte order)",
              "        if (quantifier === '*') {",
              "          quantifier = arguments.length - argumentPointer",
              "        }",
              "        if (quantifier > (arguments.length - argumentPointer)) {",
              "          throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 24 & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 16 & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] >> 8 & 0xFF)",
              "          result += String.fromCharCode(arguments[argumentPointer] & 0xFF)",
              "          argumentPointer++",
              "        }",
              "        break",
              "      case 'f':",
              "      case 'd':",
              "        // float (machine dependent size and representation)",
              "        // double (machine dependent size and representation)",
              "        // version based on IEEE754",
              "        precisionBits = 23",
              "        exponentBits = 8",
              "        if (instruction === 'd') {",
              "          precisionBits = 52",
              "          exponentBits = 11",
              "        }",
              "        if (quantifier === '*') {",
              "          quantifier = arguments.length - argumentPointer",
              "        }",
              "        if (quantifier > (arguments.length - argumentPointer)) {",
              "          throw new Error('Warning:  pack() Type ' + instruction + ': too few arguments')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          argument = arguments[argumentPointer]",
              "          bias = Math.pow(2, exponentBits - 1) - 1",
              "          minExp = -bias + 1",
              "          maxExp = bias",
              "          minUnnormExp = minExp - precisionBits",
              "          status = isNaN(n = parseFloat(argument)) || n === -Infinity || n === +Infinity ? n : 0",
              "          exp = 0",
              "          len = 2 * bias + 1 + precisionBits + 3",
              "          bin = new Array(len)",
              "          signal = (n = status !== 0 ? 0 : n) < 0",
              "          n = Math.abs(n)",
              "          intPart = Math.floor(n)",
              "          floatPart = n - intPart",
              "          for (k = len; k;) {",
              "            bin[--k] = 0",
              "          }",
              "          for (k = bias + 2; intPart && k;) {",
              "            bin[--k] = intPart % 2",
              "            intPart = Math.floor(intPart / 2)",
              "          }",
              "          for (k = bias + 1; floatPart > 0 && k; --floatPart) {",
              "            (bin[++k] = ((floatPart *= 2) >= 1) - 0)",
              "          }",
              "          for (k = -1; ++k < len && !bin[k];) {}",
              "          // @todo: Make this more readable:",
              "          const key = (lastBit = precisionBits - 1 +",
              "            (k =",
              "              (exp = bias + 1 - k) >= minExp &&",
              "              exp <= maxExp ? k + 1 : bias + 1 - (exp = minExp - 1))) + 1",
              "          if (bin[key]) {",
              "            if (!(rounded = bin[lastBit])) {",
              "              for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]) {}",
              "            }",
              "            for (j = lastBit + 1; rounded && --j >= 0;",
              "              (bin[j] = !bin[j] - 0) && (rounded = 0)) {}",
              "          }",
              "          for (k = k - 2 < 0 ? -1 : k - 3; ++k < len && !bin[k];) {}",
              "          if ((exp = bias + 1 - k) >= minExp && exp <= maxExp) {",
              "            ++k",
              "          } else {",
              "            if (exp < minExp) {",
              "              if (exp !== bias + 1 - len && exp < minUnnormExp) {",
              "                // \"encodeFloat::float underflow\"",
              "              }",
              "              k = bias + 1 - (exp = minExp - 1)",
              "            }",
              "          }",
              "          if (intPart || status !== 0) {",
              "            exp = maxExp + 1",
              "            k = bias + 2",
              "            if (status === -Infinity) {",
              "              signal = 1",
              "            } else if (isNaN(status)) {",
              "              bin[k] = 1",
              "            }",
              "          }",
              "          n = Math.abs(exp + bias)",
              "          tmpResult = ''",
              "          for (j = exponentBits + 1; --j;) {",
              "            tmpResult = (n % 2) + tmpResult",
              "            n = n >>= 1",
              "          }",
              "          n = 0",
              "          j = 0",
              "          k = (tmpResult = (signal ? '1' : '0') + tmpResult + (bin",
              "            .slice(k, k + precisionBits)",
              "            .join(''))",
              "          ).length",
              "          r = []",
              "          for (; k;) {",
              "            n += (1 << j) * tmpResult.charAt(--k)",
              "            if (j === 7) {",
              "              r[r.length] = String.fromCharCode(n)",
              "              n = 0",
              "            }",
              "            j = (j + 1) % 8",
              "          }",
              "          r[r.length] = n ? String.fromCharCode(n) : ''",
              "          result += r.join('')",
              "          argumentPointer++",
              "        }",
              "        break",
              "      case 'x':",
              "        // NUL byte",
              "        if (quantifier === '*') {",
              "          throw new Error('Warning: pack(): Type x: \\'*\\' ignored')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          result += String.fromCharCode(0)",
              "        }",
              "        break",
              "      case 'X':",
              "        // Back up one byte",
              "        if (quantifier === '*') {",
              "          throw new Error('Warning: pack(): Type X: \\'*\\' ignored')",
              "        }",
              "        for (i = 0; i < quantifier; i++) {",
              "          if (result.length === 0) {",
              "            throw new Error('Warning: pack(): Type X:' + ' outside of string')",
              "          } else {",
              "            result = result.substring(0, result.length - 1)",
              "          }",
              "        }",
              "        break",
              "      case '@':",
              "        // NUL-fill to absolute position",
              "        if (quantifier === '*') {",
              "          throw new Error('Warning: pack(): Type X: \\'*\\' ignored')",
              "        }",
              "        if (quantifier > result.length) {",
              "          extraNullCount = quantifier - result.length",
              "          for (i = 0; i < extraNullCount; i++) {",
              "            result += String.fromCharCode(0)",
              "          }",
              "        }",
              "        if (quantifier < result.length) {",
              "          result = result.substring(0, quantifier)",
              "        }",
              "        break",
              "      default:",
              "        throw new Error('Warning: pack() Type ' + instruction + ': unknown format code')",
              "    }",
              "  }",
              "  if (argumentPointer < arguments.length) {",
              "    const msg2 = 'Warning: pack(): ' + (arguments.length - argumentPointer) + ' arguments unused'",
              "    throw new Error(msg2)",
              "  }",
              "  return result",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "ef01cbc0-d999-4b80-ad81-bea4e181be83",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "appKey",
            "value": "{{appKey}}",
            "type": "text"
          },
          {
            "key": "token",
            "value": "{{token}}",
            "type": "text"
          },
          {
            "key": "timestamp",
            "value": "{{$timestamp}}",
            "type": "text"
          },
          {
            "key": "nonce",
            "value": "{{nonce}}",
            "type": "text"
          },
          {
            "key": "signature",
            "value": "{{signature}}",
            "type": "text"
          },
          {
            "key": "msgType",
            "value": "IUOP_CREATE_ORDER",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{URL}}/openapi/api/dispatch"
      },
      "response": []
    },
    {
      "name": "Access Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "bb2bc975-b86d-4659-85ee-575ad66b9801",
            "exec": [
              "var res = JSON.parse(responseBody);",
              "",
              "if (res.apiResultData) {",
              "    pm.collectionVariables.set(\"token\", res.apiResultData.accessToken);",
              "    pm.collectionVariables.set(\"expireIn\", res.apiResultData.expireIn);",
              "    var uuid = require('uuid');",
              "    var nonce = uuid.v4(); ",
              "    pm.collectionVariables.set(\"nonce\", nonce);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "id": "3dcb240f-3d17-482d-9010-96a4f29e77e2",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "lang",
            "value": "en",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{URL}}/openapi/api/token?appKey={{appKey}}&appSecret={{appSecret}}",
          "host": [
            "{{URL}}"
          ],
          "path": [
            "openapi",
            "api",
            "token"
          ],
          "query": [
            {
              "key": "appKey",
              "value": "{{appKey}}"
            },
            {
              "key": "appSecret",
              "value": "{{appSecret}}"
            }
          ]
        }
      },
      "response": [
        {
          "id": "9a8fa4b7-f070-4e84-8226-cfc7450c390a",
          "name": "Response Example",
          "originalRequest": {
            "method": "GET",
            "header": [
              {
                "key": "lang",
                "value": "en",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{URL}}/openapi/api/token?appKey={{appKey}}&appSecret={{appSecret}}",
              "host": [
                "{{URL}}"
              ],
              "path": [
                "openapi",
                "api",
                "token"
              ],
              "query": [
                {
                  "key": "appKey",
                  "value": "{{appKey}}"
                },
                {
                  "key": "appSecret",
                  "value": "{{appSecret}}"
                }
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Date",
              "value": "Wed, 16 Mar 2022 06:41:38 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "173"
            },
            {
              "key": "X-Kong-Response-Latency",
              "value": "34"
            },
            {
              "key": "Server",
              "value": "kong/2.5.0"
            },
            {
              "key": "Via",
              "value": "1.1 google"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "{\n    \"apiResultCode\": 0,\n    \"apiErrorMsg\": null,\n    \"apiTimestamp\": 1647412898115,\n    \"apiResultData\": {\n        \"accessToken\": \"auth_fba5c391-a751-4f47-a394-c6f0bb3c4130_1638339241848\",\n        \"expireIn\": 7200\n    }\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "5d3e35c3-ce50-4590-9c23-4a3f9dec9611",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "9b05fe87-775b-475c-8459-1c49ab696ada",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "542d6e64-4096-495d-81cb-b832e8710b20",
      "key": "URL",
      "value": "http://api-ifsp.sit.sf.global",
      "type": "string"
    },
    {
      "id": "22ca09c3-0b5d-4f07-b627-663d367a50e6",
      "key": "appKey",
      "value": "cdd169d87a4698d314754a79f180308a",
      "type": "string"
    },
    {
      "id": "db3104b7-b1c1-4e17-8453-fd934c2db996",
      "key": "signature",
      "value": "",
      "type": "string"
    },
    {
      "id": "eddbc164-224a-46a8-b162-227f3075dbb2",
      "key": "appSecret",
      "value": "69fb3e868a45d0bdd5b0de0ea1db6ece",
      "type": "string"
    },
    {
      "id": "f72316d0-63cc-49b9-af42-0f33fd5a58d6",
      "key": "customerCode",
      "value": "ICRME000SRN93",
      "type": "string"
    },
    {
      "id": "7fc65207-3bff-442e-abdd-2dc2f62dc3fa",
      "key": "aesKey",
      "value": "oI1YdU1cb1YC70HVjZRa3wXBLUsrIUYr5lDh0gFrMbe",
      "type": "string"
    },
    {
      "id": "68cd7fa5-ce92-425c-ba7c-31cf1f397f6e",
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "id": "651e7401-85a4-46bc-8eee-88e8619a8087",
      "key": "expireIn",
      "value": "",
      "type": "string"
    },
    {
      "id": "e5449d9a-a93d-4666-965e-e838e346da0d",
      "key": "nonce",
      "value": "",
      "type": "string"
    },
    {
      "id": "e2abafe3-934a-4bf0-939d-ae11f2b25832",
      "key": "timestamp",
      "value": ""
    },
    {
      "id": "8bc99b17-f195-499c-9df6-2b964a311282",
      "key": "request_body",
      "value": "",
      "type": "string"
    }
  ]
}